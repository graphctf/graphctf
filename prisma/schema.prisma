datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  CAPTAIN
}

enum ChallengeScoringType {
  STATIC
  CHANGE_WITH_TIME
  CHANGE_WITH_SOLVES
}

enum SolutionType {
  TEXT
  TEXT_SENSITIVE
  REGEX
}

model Game {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name String

  // |- Lifecycle
  visibleAt DateTime
  startsAt  DateTime
  endsAt    DateTime
  hiddenAt  DateTime

  // Relations
  users       User[]
  teams       Team[]
  challenges  Challenge[]
  hints       Hint[]
  attempts    Attempt[]
  hintReveals HintReveal[]
  messages    Message[]
  tags        Tag[]
  solutions   Solution[]
}

model Message {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  title   String
  content String @db.Text

  // Relations
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String
}

model User {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  username String
  role     UserRole

  // Relations
  game        Game         @relation(fields: [gameId], references: [id])
  gameId      String
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      String
  attempts    Attempt[]
  hintReveals HintReveal[]

  @@unique([username, gameId])
}

model Team {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  slug   String
  name   String
  code   String @unique
  points Int    @default(0)

  // Relations
  game        Game         @relation(fields: [gameId], references: [id])
  gameId      String
  users       User[]
  attempts    Attempt[]
  hintReveals HintReveal[]

  @@unique([ gameId, slug ])
}

model Challenge {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  slug     String
  title    String
  text     String    @db.Text
  startsAt DateTime?
  endsAt   DateTime?

  // |- Scoring
  allowsMultiUserSolves Boolean              @default(false)
  evaluatedByOrganizer  Boolean              @default(false)
  scoring               ChallengeScoringType @default(STATIC)
  points                Int
  pointsEnd             Int?
  pointsStartAt         DateTime?
  pointsEndAt           DateTime?
  pointsEndSolveCount   Int?

  // Relations
  game                Game         @relation(fields: [gameId], references: [id])
  gameId              String
  requiresChallenge   Challenge?   @relation("requiresChallengeRelation", fields: [requiresChallengeId], references: [id])
  requiresChallengeId String?
  requiredBy          Challenge[]  @relation("requiresChallengeRelation")
  tags                Tag[]
  solutions           Solution[]
  hints               Hint[]
  attempts            Attempt[]
  hintReveals         HintReveal[]

  @@unique([slug, gameId])
}

model Tag {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  slug String

  // Relations
  game       Game        @relation(fields: [gameId], references: [id])
  gameId     String
  challenges Challenge[]

  @@unique([slug, gameId])
}

model Solution {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  text String
  type SolutionType

  // Relations
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
}

model Hint {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  text        String    @db.Text
  availableAt DateTime?
  penalty     Int?

  // Relations
  game        Game         @relation(fields: [gameId], references: [id])
  gameId      String
  challenge   Challenge    @relation(fields: [challengeId], references: [id])
  challengeId String
  hintReveals HintReveal[]
}

model Attempt {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  submission      String?
  correct         Boolean?
  pointsEarned    Int?
  reviewRequired  Boolean  @default(false)
  reviewCompleted Boolean  @default(false)

  // Relations
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
}

model HintReveal {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  pointsCost Int?

  // Relations
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  hint        Hint      @relation(fields: [hintId], references: [id])
  hintId      String
}
